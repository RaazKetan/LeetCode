class Solution {
public:
bool Check(int row, int col, vector<string>&ds, int n)
    {
        int duprow = row;
        int dupcol = col;

        // check for the upper diagonal
        while(row>= 0 &&col>=0)
        {
            if(ds[row][col] == 'Q')
            return false;

            row--;
            col--;
        }
        row = duprow;
        col = dupcol;
        //check in the same row
        while(col>=0)
        {
             if(ds[row][col] == 'Q')
            return false;
            col--;
        }
       row = duprow;
        col = dupcol;
        //check in the lower diagonal
        while(row<n && col >=0)
        {
             if(ds[row][col] == 'Q')
            return false;

            row++;
            col--;
        }
        return true;
    }
  void Solve(int col,  vector<vector<string>>&ans, vector<string>&ds, int n)
    {
        if(col == n)
        {
            ans.push_back(ds);
            return;
        }
        for(int row = 0; row<n; row++)
        {
            if(Check(row, col, ds, n))
            {
                ds[row][col] = 'Q';
                Solve(col+1, ans, ds,n);
                ds[row][col] = '.';
            }
        }
    }
    
    vector<vector<string>> solveNQueens(int n) {
     vector<vector<string>>ans;
     vector<string> ds(n, string(n, '.'));
      Solve(0, ans, ds, n);
      return ans;
    }
};