class Solution {
  public:
   void Combination(int i, int target, vector<int>&arr, vector<vector<int>>ans, vector<int>ds)
   {
      if(i == arr.size())
      {
        if(target == 0){
        ans.push_back(ds);
        }
        return;
      }
      //Pick Case
      if(arr[i]<=target)
      {
        ds.push_back(arr[i]);
        Combination(i, target-arr[i], arr, ans, ds);
        // We do pop back because while coming back from pick case 
        //we have to remove the arr[i] from the ds so that we procced to the not pic case
        ds.pop_back();
      }
      //Not Pick
      Combination((i+1),target, arr, ans, ds);
   }
    vector<vector<int> > combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>ans;
        vector<int>ds;
        Combination(0, target, candidates, ans, ds);
    }
};