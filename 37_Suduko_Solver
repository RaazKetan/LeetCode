class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }
    bool solve(vector<vector<char>>& board)
    {
        for(int row = 0; row<board.size(); row++)
        {
            for(int col = 0 ; col<board[0].size(); col++)
            {
                if(board[row][col] == '.')
                {
                    for(char c = '1'; c<='9'; c++)
                    {
                        if(isValid(row,col,c,board)){
                        board[row][col] = c;

                        if(solve(board))
                        return true;

                        else
                        board[row][col] = '.';
                        }
                    }
                return false;
                }
            }
        }
        return true;
    }
    bool isValid(int row, int col ,char c, vector<vector<char>>&board)
    {
       
        for(int i = 0; i < 9; i++){
 // to check for entire row
            if(board[i][col] == c)
            return false;
//to check for entire col
            if(board[row][i] == c)
            return false;

            // to check for 3*3 matrix now
            if(board[3*(row/3)+i/3][3*(col/3)+i%3] == c)
            return false;
        }
        return true; 
    }
};